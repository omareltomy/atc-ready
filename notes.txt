Chance of direction occurrence:
Crossing left to right: 28%
Crossing right to left: 28%
Converging: 28%
Opposite direction: 11%
Overtaking: 5%
Notes:
Intersection point should be a randomised between 2 and 6 miles. (Want to be able to change if needed)
Intersection point should be +- 2 miles the same distance from each aircraft, but I want it to have this margin for realism.
Crossing left to right:
Clock position should be 10 or 11
Distance to be randomised between 3 and 8 miles but:
Angle of convergence should be between 55° and 125°
Crossing right to left:
Clock position should be 1 or 2
Distance to be randomised between 3 and 8 miles but:
Angle of convergence should be between 55° and 125°
Converging:
Clock position should be 2, 3 or 9, 10
Distance to be randomised between 2 and 5 miles but:
Angle of convergence should be less than 40° (Want to be able to change this if needed) 
Opposite direction:
Clock position should be 12
Small note: this is the only direction that can have some variations on the clock position. Instead of it being EXACTLY 12 o’clock, I want it to be so that there can be a 10° angle of convergence difference in generation either side. This so that there is variation and to ensure the clock position remains clearly 12 (and not becomes 11 or 1).
Point of intersection should be half way both aircraft
Distance to be randomised between 4 and 9 miles
Angle of convergence should NOT be less than 170°
Overtaking:
Clock position should be 5, 6 or 7
Distance to be randomised between 2 and 6 miles
Make sure:
aircraft actually have a point of intersection since in the last version some paths never crossed
labels don’t overlap
labels are out of the way of other information (such as the leader line from the aircraft, that can be confusing)
that, as much as possible, the variables in the code are reachable and editable if necessary (think angles, clock position, distances…)
Callsigns:
Currently not generated correctly.
My code actually has a working setup (see generation.js from line 65)
I would like you to use the data (data.js) I’ve provided on the different aircraft for that, since it’s accurate relative to the aircraft.
Aircraft type:
The type of the aircraft in the label shouldn’t be the fully written out one. If you look in my data.js file, you can see that all aircraft have a name and also a type. For this, you should use the abbreviated type. (The name in the data is used for the solution only).
Aircraft level:
Flight levels should ALWAYS be rounded to the nearest 10
When the aircraft is flying in flight levels, the label should simply show the number.
For example: if someone flies at Flight Level 70, it should read 070 (and not FL070)
Aircraft level change:
Change in levels should ALWAYS be rounded to the nearest 10 (same as previous point)
Labels:
Labels should be generated with line breaks.
The format is as follows (dashes not included):
V (line break)
Callsign - WTC - Type (line break)
Level - Level Change – Speed
Should ALWAYS be aligned left (even when on the left of the aircraft)
Leader lines:
Length of the leader lines should be capped.
The minimum speed of the data I have is 60 knots and maximum speed is 350 knots.
I want the length of the leader line to be capped at 15 pixels for 60 knots and 45 pixels for 350 knots and then scale within that. (Would like to be able to change these numbers if needed)
History dots:
The history dots are now visually clear, but I want them to correspond to the speed (just like the leader lines are).
This can be capped too, but I don’t know yet which values would work for that, you’re free to play around with what feels natural.
It should be linked to the min (60) and max (350) speed of the data.